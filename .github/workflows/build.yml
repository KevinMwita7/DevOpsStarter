name: Build

on:
  push:
    branches: [main]
  pull_request:

env:
  IMAGE_NAME: kevinmwita7/helloworld
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: pip

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run Unit Tests with Coverage
      run: |
        coverage run -m pytest tests/
        coverage report
        coverage xml

    - name: Publish Coverage
      uses: coverallsapp/github-action@v2
      with:
        format: cobertura
        file: coverage.xml

  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        # Commonly enabled options, see https://github.com/actions/dependency-review-action#configuration-options for all available options.
        with:
          comment-summary-in-pr: always
          retry-on-snapshot-warnings: true
          base-ref: ${{ github.base_ref }}
          head-ref: ${{ github.head_ref }}

  docker:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    # GITHUB_TOKEN authentication, add only if you're not going to use a PAT
    permissions:
      contents: write    
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    # No need for checkout. Buildx will do this
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    # Setting the call option to check makes the  workflow fail if any check warnings are detected in the build's configuration.
    - name: Validate build configuration
      uses: docker/build-push-action@v6
      with:
        call: check
    # The extracted metadata will be used to get the image tag in the next step
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
    # provenance mode=max enables the highest level of provenance metadata in the container image. The default is mode=min
    # for private repos. Max mode includes the values of build arguments in the metadata, so avoid using build args to pass secrets.
    # Pass sensitive build args using secret mounts (https://docs.docker.com/build/ci/github-actions/secrets/#secret-mounts)
    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        push: true
        provenance: mode=max
        tags: ${{ steps.meta.outputs.tags }}
    # Alternatively, you could set the sbom option to true in the 'Build and push image' job directly above, instead of using trivy
    - name: Run Trivy scan and generate SBOM
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        scan-type: image
        format: cyclonedx
        output: trivy-sbom.json
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        exit-code: 1
      env:
        TRIVY_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
        TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sbom
        path: trivy-sbom.json
        retention-days: 20
    - name: Run Trivy scan and generate SARIF
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        scan-type: image
        format: sarif
        output: trivy-results.sarif
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        exit-code: 1
      env:
        TRIVY_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
        TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Upload Trivy SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
