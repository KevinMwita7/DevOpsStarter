name: Release Docker Image

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      sha_tag:
        description: 'The Git SHA tag of the image to release (e.g. 7d4d42b).'
        required: true
      release_tag:
        description: 'The new release tag (e.g. 1.2.3).'
        required: true
      environment:
        description: 'The target environment for deployment.'
        type: choice
        required: true
        default: 'production'
        options:
          - 'production'
          - 'staging'
          - 'qa'
env:
  IMAGE_NAME: kevinmwita7/helloworld
  SHA_TAG: ${{ github.event.inputs.sha_tag }}
  RELEASE_TAG: ${{ github.event.inputs.release_tag }}


jobs:
  promote-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_SECRET }}
          
      - name: Pull and re-tag Docker image
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }} ${{ env.IMAGE_NAME }}:${{ env.RELEASE_TAG }}

      - name: Push the new release tag
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.RELEASE_TAG }}

      - name: Deploy to production
        if: github.event.inputs.environment == 'production'
        run: |
          echo "Deploying ${{ env.IMAGE_NAME }}:${{ env.RELEASE_TAG }} to production..."
          # Add your production deployment logic here.
          # This could be a call to a deployment tool like Terraform.
      
      - name: Delete old image with SHA tag
        if: github.event.inputs.environment == 'production'
        run: |
          echo "Deleting ${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }} from Docker Hub..."

          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST -d '{"username": "'"${{ vars.DOCKERHUB_USERNAME }}"'", "password": "'"${{ secrets.DOCKERHUB_SECRET }}"'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          echo $TOKEN

          curl -s -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/${{ env.SHA_TAG }}/"
